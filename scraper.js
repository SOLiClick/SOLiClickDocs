const puppeteer = require('puppeteer');
const TurndownService = require('turndown');
const fs = require('fs-extra');
const path = require('path');

// üîó URL GitBook
const START_URL = 'https://click-me.gitbook.io/click-me-docs';

(async () => {
  const browser = await puppeteer.launch({
    headless: false,
    defaultViewport: null,
    args: ['--start-maximized']
  });

  const page = await browser.newPage();
  await page.goto(START_URL, { waitUntil: 'networkidle2' });

  // ‚è≥ –ü–æ–¥–æ–∂–¥–∞—Ç—å –ø–æ–∫–∞ —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ –æ—Ç—Ä–∏—Å—É–µ—Ç—Å—è
  await page.waitForSelector('body', { timeout: 10000 });

  // üß† –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ –º–µ–Ω—é (—Å–∞–π–¥–±–∞—Ä)
  const links = await page.evaluate(() => {
    const candidates = [
      '[data-testid="sidebar"]',
      'nav',
      '[class*="sidebar"]',
      '[class*="navigation"]',
      'aside',
      '[class*="menu"]',
      'div.scroll-nojump'
    ];

    let sidebar;
    for (const selector of candidates) {
      const el = document.querySelector(selector);
      if (el && el.querySelectorAll('a[href]').length > 0) {
        sidebar = el;
        break;
      }
    }

    const anchors = sidebar ? sidebar.querySelectorAll('a[href]') : [];
    return Array.from(anchors).map(a => a.href);
  });

  // üßπ –£–±–∏—Ä–∞–µ–º –º—É—Å–æ—Ä–Ω—ã–µ —Å—Å—ã–ª–∫–∏
  const filteredLinks = links.filter(link =>
    link.startsWith('http') &&
    !link.includes('utm_') &&
    !link.includes('#') &&
    !link.endsWith('/')
  );

  console.log(`üîó –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: ${filteredLinks.length}`);
  if (filteredLinks.length === 0) {
    console.warn('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫–∏. –ü—Ä–æ–≤–µ—Ä—å —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.');
    await browser.close();
    return;
  }

  const turndownService = new TurndownService();
  await fs.ensureDir('pages');

  for (let link of filteredLinks) {
    console.log(`üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${link}`);
    await page.goto(link, { waitUntil: 'networkidle2' });

    // ‚è≥ –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–∂–¥–∞—Ç—å—Å—è main
    try {
      await page.waitForSelector('main', { timeout: 10000 });
    } catch (e) {
      console.warn(`‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞: ${link}`);
      continue;
    }

    // üíæ –ó–∞–±–∏—Ä–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    const content = await page.evaluate(() => {
      const el = document.querySelector('main');
      return el ? el.innerHTML : '';
    });

    const markdown = turndownService.turndown(content);
    const name = link.split('/').filter(Boolean).pop().replace(/[^a-z0-9-_]/gi, '_');
    const filePath = path.join('pages', `${name}.md`);
    await fs.writeFile(filePath, markdown, 'utf-8');
  }

  await browser.close();
  console.log('‚úÖ –ì–æ—Ç–æ–≤–æ! –í—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ /pages');
})();
